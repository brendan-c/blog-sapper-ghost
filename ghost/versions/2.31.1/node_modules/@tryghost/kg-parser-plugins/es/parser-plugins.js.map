{"version":3,"file":"parser-plugins.js","sources":["../lib/parser-plugins.js"],"sourcesContent":["/* global DOMParser, window */\n\n/**\n * Copied from:\n * https://github.com/TryGhost/Ghost-Admin/blob/1f3d77d7230dd47a7eb5f38b90dfa510b2a16801/lib/koenig-editor/addon/options/parser-plugins.js\n * Which makes use of:\n * https://github.com/TryGhost/Ghost-Admin/blob/1f3d77d7230dd47a7eb5f38b90dfa510b2a16801/lib/koenig-editor/addon/helpers/clean-basic-html.js\n *\n * These functions are used to proces nodes during parsing from DOM -> mobiledoc\n */\n\nimport cleanBasicHtml from '@tryghost/kg-clean-basic-html';\n\nexport function createParserPlugins(_options = {}) {\n    const defaults = {};\n    const options = Object.assign({}, defaults, _options);\n\n    if (!options.createDocument) {\n        const Parser = (typeof DOMParser !== 'undefined' && DOMParser) || (typeof window !== 'undefined' && window.DOMParser);\n\n        if (!Parser) {\n            throw new Error('createParserPlugins() must be passed a `createDocument` function as an option when used in a non-browser environment');\n        }\n\n        options.createDocument = function (html) {\n            const parser = new Parser();\n            return parser.parseFromString(html, 'text/html');\n        };\n    }\n\n    // HELPERS -----------------------------------------------------------------\n\n    function _readFigCaptionFromNode(node, payload) {\n        let figcaption = node.querySelector('figcaption');\n\n        if (figcaption) {\n            let cleanHtml = cleanBasicHtml(figcaption.innerHTML, options);\n            payload.caption = payload.caption ? `${payload.caption} / ${cleanHtml}` : cleanHtml;\n            figcaption.remove(); // cleanup this processed element\n        }\n    }\n\n    function _readGalleryImageFromNode(node, imgNum) {\n        let fileName = node.src.match(/[^/]*$/)[0];\n        let image = {\n            fileName,\n            row: Math.floor(imgNum / 3),\n            src: node.src\n        };\n\n        if (node.width) {\n            image.width = node.width;\n        } else if (node.dataset && node.dataset.width) {\n            image.width = parseInt(node.dataset.width, 10);\n        }\n\n        if (node.height) {\n            image.height = node.height;\n        } else if (node.dataset && node.dataset.height) {\n            image.height = parseInt(node.dataset.height, 10);\n        }\n\n        if (node.alt) {\n            image.alt = node.alt;\n        }\n\n        if (node.title) {\n            image.title = node.title;\n        }\n\n        return image;\n    }\n\n    // PLUGINS -----------------------------------------------------------------\n\n    function mixtapeEmbed(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'DIV' || !node.className.match(/graf--mixtapeEmbed/)) {\n            return;\n        }\n\n        let anchor = node.querySelector('.markup--mixtapeEmbed-anchor').href;\n        let title = node.querySelector('.markup--mixtapeEmbed-strong');\n        let desc = node.querySelector('.markup--mixtapeEmbed-em');\n        let img = node.querySelector('.mixtapeImage');\n        let imgSrc = false;\n\n        // Image is optional,\n        // The element usually still exists with an additional has.mixtapeImage--empty class and has no background image\n        if (img && img.style['background-image']) {\n            imgSrc = img.style['background-image'].match(/url\\(([^)]*?)\\)/)[1];\n        }\n\n        // Format our preferred structure.\n        let metadata = {\n            url: anchor,\n            title: title,\n            description: desc,\n            thumbnail: imgSrc\n        };\n\n        let payload = {metadata, url: metadata.url, type: 'bookmark'};\n        let cardSection = builder.createCardSection('bookmark', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    // https://github.com/TryGhost/Koenig/issues/1\n    // allows arbitrary HTML blocks wrapped in our card comments to be extracted\n    // into a HTML card rather than being put through the normal parse+plugins\n    function kgHtmlCardToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 8 || node.nodeValue !== 'kg-card-begin: html') {\n            return;\n        }\n\n        let html = [];\n\n        function isHtmlEndComment(node) {\n            return node && node.nodeType === 8 && node.nodeValue === 'kg-card-end: html';\n        }\n\n        let nextNode = node.nextSibling;\n        while (nextNode && !isHtmlEndComment(nextNode)) {\n            let currentNode = nextNode;\n            html.push(currentNode.outerHTML);\n            nextNode = currentNode.nextSibling;\n            // remove nodes as we go so that they don't go through the parser\n            currentNode.remove();\n        }\n\n        let payload = {html: html.join('\\n').trim()};\n        let cardSection = builder.createCardSection('html', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    // mobiledoc by default ignores <BR> tags but we have a custom SoftReturn atom\n    function brToSoftBreakAtom(node, builder, {addMarkerable, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'BR') {\n            return;\n        }\n\n        let softReturn = builder.createAtom('soft-return');\n        addMarkerable(softReturn);\n\n        nodeFinished();\n    }\n\n    // leading newlines in text nodes will add a space to the beginning of the text\n    // which doesn't render correctly if we're replacing <br> with SoftReturn atoms\n    // after parsing text as markdown to html\n    function removeLeadingNewline(node) {\n        if (node.nodeType !== 3 || node.nodeName !== '#text') {\n            return;\n        }\n\n        node.nodeValue = node.nodeValue.replace(/^\\n/, '');\n    }\n\n    const kgGalleryCardToCard = (node, builder, {addSection, nodeFinished}) => {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        if (!node.className.match(/kg-gallery-card/)) {\n            return;\n        }\n\n        let payload = {};\n        let imgs = Array.from(node.querySelectorAll('img'));\n\n        // Process nodes into the payload\n        payload.images = imgs.map(_readGalleryImageFromNode);\n\n        _readFigCaptionFromNode(node, payload);\n\n        let cardSection = builder.createCardSection('gallery', payload);\n        addSection(cardSection);\n        nodeFinished();\n    };\n\n    function grafGalleryToCard(node, builder, {addSection, nodeFinished}) {\n        function isGrafGallery(node) {\n            return node.nodeType === 1 && node.tagName === 'DIV' && node.dataset && node.dataset.paragraphCount && node.querySelectorAll('img').length > 0;\n        }\n\n        if (!isGrafGallery(node)) {\n            return;\n        }\n\n        let payload = {};\n\n        // These galleries exist in multiple divs. Read the images and cation from the first one...\n        let imgs = Array.from(node.querySelectorAll('img'));\n        _readFigCaptionFromNode(node, payload);\n\n        // ...and then iterate over any remaining divs until we run out of matches\n        let nextNode = node.nextSibling;\n        while (nextNode && isGrafGallery(nextNode)) {\n            let currentNode = nextNode;\n            imgs = imgs.concat(Array.from(currentNode.querySelectorAll('img')));\n            _readFigCaptionFromNode(currentNode, payload);\n            nextNode = currentNode.nextSibling;\n            // remove nodes as we go so that they don't go through the parser\n            currentNode.remove();\n        }\n\n        // Process nodes into the payload\n        payload.images = imgs.map(_readGalleryImageFromNode);\n\n        let cardSection = builder.createCardSection('gallery', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureToImageCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let img = node.querySelector('img');\n        let kgClass = node.className.match(/kg-width-(wide|full)/);\n        let grafClass = node.className.match(/graf--layout(FillWidth|OutsetCenter)/);\n\n        if (!img) {\n            return;\n        }\n\n        let payload = {\n            src: img.src,\n            alt: img.alt,\n            title: img.title\n        };\n\n        if (kgClass) {\n            payload.cardWidth = kgClass[1];\n        } else if (grafClass) {\n            payload.cardWidth = grafClass[1] === 'FillWidth' ? 'full' : 'wide';\n        }\n\n        _readFigCaptionFromNode(node, payload);\n\n        let cardSection = builder.createCardSection('image', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function imgToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'IMG') {\n            return;\n        }\n\n        let payload = {\n            src: node.src,\n            alt: node.alt,\n            title: node.title\n        };\n\n        let cardSection = builder.createCardSection('image', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function hrToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'HR') {\n            return;\n        }\n\n        let cardSection = builder.createCardSection('hr');\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureIframeToEmbedCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let iframe = node.querySelector('iframe');\n\n        if (!iframe) {\n            return;\n        }\n\n        let src = iframe.src;\n\n        // If we don't have a src, or it's not an absolute URL, we can't handle this\n        if (!src || !src.match(/^https?:\\/\\//i)) {\n            return;\n        }\n\n        let payload = {\n            url: src\n        };\n\n        _readFigCaptionFromNode(node, payload);\n\n        payload.html = node.innerHTML;\n\n        let cardSection = builder.createCardSection('embed', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureBlockquoteToEmbedCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let blockquote = node.querySelector('blockquote');\n        let link = node.querySelector('a');\n\n        if (!blockquote || !link) {\n            return;\n        }\n\n        let url = link.href;\n\n        // If we don't have a url, or it's not an absolute URL, we can't handle this\n        if (!url || !url.match(/^https?:\\/\\//i)) {\n            return;\n        }\n\n        let payload = {\n            url: url\n        };\n\n        _readFigCaptionFromNode(node, payload);\n\n        payload.html = node.innerHTML;\n\n        let cardSection = builder.createCardSection('embed', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function figureToCodeCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let pre = node.querySelector('pre');\n\n        // If this figure doesn't have a pre tag in it\n        if (!pre) {\n            return;\n        }\n\n        let code = pre.querySelector('code');\n        let figcaption = node.querySelector('figcaption');\n\n        // if there's no caption the preCodeToCard plugin will pick it up instead\n        if (!code || !figcaption) {\n            return;\n        }\n\n        let payload = {\n            code: code.textContent\n        };\n\n        _readFigCaptionFromNode(node, payload);\n\n        let preClass = pre.getAttribute('class') || '';\n        let codeClass = code.getAttribute('class') || '';\n        let langRegex = /lang(?:uage)?-(.*?)(?:\\s|$)/i;\n        let languageMatches = preClass.match(langRegex) || codeClass.match(langRegex);\n        if (languageMatches) {\n            payload.language = languageMatches[1].toLowerCase();\n        }\n\n        let cardSection = builder.createCardSection('code', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    function preCodeToCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'PRE') {\n            return;\n        }\n\n        let [codeElement] = node.children;\n\n        if (codeElement && codeElement.tagName === 'CODE') {\n            let payload = {code: codeElement.textContent};\n\n            let preClass = node.getAttribute('class') || '';\n            let codeClass = codeElement.getAttribute('class') || '';\n            let langRegex = /lang(?:uage)?-(.*?)(?:\\s|$)/i;\n            let languageMatches = preClass.match(langRegex) || codeClass.match(langRegex);\n            if (languageMatches) {\n                payload.language = languageMatches[1].toLowerCase();\n            }\n\n            let cardSection = builder.createCardSection('code', payload);\n            addSection(cardSection);\n            nodeFinished();\n        }\n    }\n\n    function figureScriptToHtmlCard(node, builder, {addSection, nodeFinished}) {\n        if (node.nodeType !== 1 || node.tagName !== 'FIGURE') {\n            return;\n        }\n\n        let script = node.querySelector('script');\n\n        if (!script || !script.src.match(/^https:\\/\\/gist\\.github\\.com/)) {\n            return;\n        }\n\n        let payload = {html: script.outerHTML};\n        let cardSection = builder.createCardSection('html', payload);\n        addSection(cardSection);\n        nodeFinished();\n    }\n\n    return [\n        mixtapeEmbed,\n        kgHtmlCardToCard,\n        brToSoftBreakAtom,\n        removeLeadingNewline,\n        kgGalleryCardToCard,\n        figureBlockquoteToEmbedCard, // I think these can contain images\n        grafGalleryToCard,\n        figureToImageCard,\n        imgToCard,\n        hrToCard,\n        figureToCodeCard,\n        preCodeToCard,\n        figureIframeToEmbedCard,\n        figureScriptToHtmlCard\n    ];\n}\n"],"names":["createParserPlugins","_options","defaults","options","Object","assign","createDocument","Parser","DOMParser","window","Error","html","parser","parseFromString","_readFigCaptionFromNode","node","payload","figcaption","querySelector","cleanHtml","cleanBasicHtml","innerHTML","caption","remove","_readGalleryImageFromNode","imgNum","fileName","src","match","image","row","Math","floor","width","dataset","parseInt","height","alt","title","mixtapeEmbed","builder","addSection","nodeFinished","nodeType","tagName","className","anchor","href","desc","img","imgSrc","style","metadata","url","description","thumbnail","type","cardSection","createCardSection","kgHtmlCardToCard","nodeValue","isHtmlEndComment","nextNode","nextSibling","currentNode","push","outerHTML","join","trim","brToSoftBreakAtom","addMarkerable","softReturn","createAtom","removeLeadingNewline","nodeName","replace","kgGalleryCardToCard","imgs","Array","from","querySelectorAll","images","map","grafGalleryToCard","isGrafGallery","paragraphCount","length","concat","figureToImageCard","kgClass","grafClass","cardWidth","imgToCard","hrToCard","figureIframeToEmbedCard","iframe","figureBlockquoteToEmbedCard","blockquote","link","figureToCodeCard","pre","code","textContent","preClass","getAttribute","codeClass","langRegex","languageMatches","language","toLowerCase","preCodeToCard","codeElement","children","figureScriptToHtmlCard","script"],"mappings":";;AAAA;AAaO,SAASA,mBAAT,CAA6BC,QAAQ,GAAG,EAAxC,EAA4C;QACzCC,QAAQ,GAAG,EAAjB;QACMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,QAAlB,EAA4BD,QAA5B,CAAhB;;MAEI,CAACE,OAAO,CAACG,cAAb,EAA6B;UACnBC,MAAM,GAAI,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAArC,IAAoD,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACD,SAA3G;;QAEI,CAACD,MAAL,EAAa;YACH,IAAIG,KAAJ,CAAU,sHAAV,CAAN;;;IAGJP,OAAO,CAACG,cAAR,GAAyB,UAAUK,IAAV,EAAgB;YAC/BC,MAAM,GAAG,IAAIL,MAAJ,EAAf;aACOK,MAAM,CAACC,eAAP,CAAuBF,IAAvB,EAA6B,WAA7B,CAAP;KAFJ;GAX2C;;;WAmBtCG,uBAAT,CAAiCC,IAAjC,EAAuCC,OAAvC,EAAgD;QACxCC,UAAU,GAAGF,IAAI,CAACG,aAAL,CAAmB,YAAnB,CAAjB;;QAEID,UAAJ,EAAgB;UACRE,SAAS,GAAGC,cAAc,CAACH,UAAU,CAACI,SAAZ,EAAuBlB,OAAvB,CAA9B;MACAa,OAAO,CAACM,OAAR,GAAkBN,OAAO,CAACM,OAAR,aAAqBN,OAAO,CAACM,OAA7B,gBAA0CH,SAA1C,IAAwDA,SAA1E;MACAF,UAAU,CAACM,MAAX,GAHY;;;;WAOXC,yBAAT,CAAmCT,IAAnC,EAAyCU,MAAzC,EAAiD;QACzCC,QAAQ,GAAGX,IAAI,CAACY,GAAL,CAASC,KAAT,CAAe,QAAf,EAAyB,CAAzB,CAAf;QACIC,KAAK,GAAG;MACRH,QADQ;MAERI,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWP,MAAM,GAAG,CAApB,CAFG;MAGRE,GAAG,EAAEZ,IAAI,CAACY;KAHd;;QAMIZ,IAAI,CAACkB,KAAT,EAAgB;MACZJ,KAAK,CAACI,KAAN,GAAclB,IAAI,CAACkB,KAAnB;KADJ,MAEO,IAAIlB,IAAI,CAACmB,OAAL,IAAgBnB,IAAI,CAACmB,OAAL,CAAaD,KAAjC,EAAwC;MAC3CJ,KAAK,CAACI,KAAN,GAAcE,QAAQ,CAACpB,IAAI,CAACmB,OAAL,CAAaD,KAAd,EAAqB,EAArB,CAAtB;;;QAGAlB,IAAI,CAACqB,MAAT,EAAiB;MACbP,KAAK,CAACO,MAAN,GAAerB,IAAI,CAACqB,MAApB;KADJ,MAEO,IAAIrB,IAAI,CAACmB,OAAL,IAAgBnB,IAAI,CAACmB,OAAL,CAAaE,MAAjC,EAAyC;MAC5CP,KAAK,CAACO,MAAN,GAAeD,QAAQ,CAACpB,IAAI,CAACmB,OAAL,CAAaE,MAAd,EAAsB,EAAtB,CAAvB;;;QAGArB,IAAI,CAACsB,GAAT,EAAc;MACVR,KAAK,CAACQ,GAAN,GAAYtB,IAAI,CAACsB,GAAjB;;;QAGAtB,IAAI,CAACuB,KAAT,EAAgB;MACZT,KAAK,CAACS,KAAN,GAAcvB,IAAI,CAACuB,KAAnB;;;WAGGT,KAAP;GAzD2C;;;WA8DtCU,YAAT,CAAsBxB,IAAtB,EAA4ByB,OAA5B,EAAqC;IAACC,UAAD;IAAaC;GAAlD,EAAiE;QACzD3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,KAAxC,IAAiD,CAAC7B,IAAI,CAAC8B,SAAL,CAAejB,KAAf,CAAqB,oBAArB,CAAtD,EAAkG;;;;QAI9FkB,MAAM,GAAG/B,IAAI,CAACG,aAAL,CAAmB,8BAAnB,EAAmD6B,IAAhE;QACIT,KAAK,GAAGvB,IAAI,CAACG,aAAL,CAAmB,8BAAnB,CAAZ;QACI8B,IAAI,GAAGjC,IAAI,CAACG,aAAL,CAAmB,0BAAnB,CAAX;QACI+B,GAAG,GAAGlC,IAAI,CAACG,aAAL,CAAmB,eAAnB,CAAV;QACIgC,MAAM,GAAG,KAAb,CAT6D;;;QAazDD,GAAG,IAAIA,GAAG,CAACE,KAAJ,CAAU,kBAAV,CAAX,EAA0C;MACtCD,MAAM,GAAGD,GAAG,CAACE,KAAJ,CAAU,kBAAV,EAA8BvB,KAA9B,CAAoC,iBAApC,EAAuD,CAAvD,CAAT;KAdyD;;;QAkBzDwB,QAAQ,GAAG;MACXC,GAAG,EAAEP,MADM;MAEXR,KAAK,EAAEA,KAFI;MAGXgB,WAAW,EAAEN,IAHF;MAIXO,SAAS,EAAEL;KAJf;QAOIlC,OAAO,GAAG;MAACoC,QAAD;MAAWC,GAAG,EAAED,QAAQ,CAACC,GAAzB;MAA8BG,IAAI,EAAE;KAAlD;QACIC,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,UAA1B,EAAsC1C,OAAtC,CAAlB;IACAyB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;GA1F+B;;;;;WAgGtCiB,gBAAT,CAA0B5C,IAA1B,EAAgCyB,OAAhC,EAAyC;IAACC,UAAD;IAAaC;GAAtD,EAAqE;QAC7D3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6C,SAAL,KAAmB,qBAA9C,EAAqE;;;;QAIjEjD,IAAI,GAAG,EAAX;;aAESkD,gBAAT,CAA0B9C,IAA1B,EAAgC;aACrBA,IAAI,IAAIA,IAAI,CAAC4B,QAAL,KAAkB,CAA1B,IAA+B5B,IAAI,CAAC6C,SAAL,KAAmB,mBAAzD;;;QAGAE,QAAQ,GAAG/C,IAAI,CAACgD,WAApB;;WACOD,QAAQ,IAAI,CAACD,gBAAgB,CAACC,QAAD,CAApC,EAAgD;UACxCE,WAAW,GAAGF,QAAlB;MACAnD,IAAI,CAACsD,IAAL,CAAUD,WAAW,CAACE,SAAtB;MACAJ,QAAQ,GAAGE,WAAW,CAACD,WAAvB,CAH4C;;MAK5CC,WAAW,CAACzC,MAAZ;;;QAGAP,OAAO,GAAG;MAACL,IAAI,EAAEA,IAAI,CAACwD,IAAL,CAAU,IAAV,EAAgBC,IAAhB;KAArB;QACIX,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,MAA1B,EAAkC1C,OAAlC,CAAlB;IACAyB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;GAvH+B;;;WA2HtC2B,iBAAT,CAA2BtD,IAA3B,EAAiCyB,OAAjC,EAA0C;IAAC8B,aAAD;IAAgB5B;GAA1D,EAAyE;QACjE3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,IAA5C,EAAkD;;;;QAI9C2B,UAAU,GAAG/B,OAAO,CAACgC,UAAR,CAAmB,aAAnB,CAAjB;IACAF,aAAa,CAACC,UAAD,CAAb;IAEA7B,YAAY;GAnI+B;;;;;WAyItC+B,oBAAT,CAA8B1D,IAA9B,EAAoC;QAC5BA,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC2D,QAAL,KAAkB,OAA7C,EAAsD;;;;IAItD3D,IAAI,CAAC6C,SAAL,GAAiB7C,IAAI,CAAC6C,SAAL,CAAee,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAAjB;;;QAGEC,mBAAmB,GAAG,CAAC7D,IAAD,EAAOyB,OAAP,EAAgB;IAACC,UAAD;IAAaC;GAA7B,KAA+C;QACnE3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,QAA5C,EAAsD;;;;QAIlD,CAAC7B,IAAI,CAAC8B,SAAL,CAAejB,KAAf,CAAqB,iBAArB,CAAL,EAA8C;;;;QAI1CZ,OAAO,GAAG,EAAd;QACI6D,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWhE,IAAI,CAACiE,gBAAL,CAAsB,KAAtB,CAAX,CAAX,CAVuE;;IAavEhE,OAAO,CAACiE,MAAR,GAAiBJ,IAAI,CAACK,GAAL,CAAS1D,yBAAT,CAAjB;;IAEAV,uBAAuB,CAACC,IAAD,EAAOC,OAAP,CAAvB;;QAEIyC,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,SAA1B,EAAqC1C,OAArC,CAAlB;IACAyB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;GAnBhB;;WAsBSyC,iBAAT,CAA2BpE,IAA3B,EAAiCyB,OAAjC,EAA0C;IAACC,UAAD;IAAaC;GAAvD,EAAsE;aACzD0C,aAAT,CAAuBrE,IAAvB,EAA6B;aAClBA,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,KAAxC,IAAiD7B,IAAI,CAACmB,OAAtD,IAAiEnB,IAAI,CAACmB,OAAL,CAAamD,cAA9E,IAAgGtE,IAAI,CAACiE,gBAAL,CAAsB,KAAtB,EAA6BM,MAA7B,GAAsC,CAA7I;;;QAGA,CAACF,aAAa,CAACrE,IAAD,CAAlB,EAA0B;;;;QAItBC,OAAO,GAAG,EAAd,CATkE;;QAY9D6D,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWhE,IAAI,CAACiE,gBAAL,CAAsB,KAAtB,CAAX,CAAX;;IACAlE,uBAAuB,CAACC,IAAD,EAAOC,OAAP,CAAvB,CAbkE;;;QAgB9D8C,QAAQ,GAAG/C,IAAI,CAACgD,WAApB;;WACOD,QAAQ,IAAIsB,aAAa,CAACtB,QAAD,CAAhC,EAA4C;UACpCE,WAAW,GAAGF,QAAlB;MACAe,IAAI,GAAGA,IAAI,CAACU,MAAL,CAAYT,KAAK,CAACC,IAAN,CAAWf,WAAW,CAACgB,gBAAZ,CAA6B,KAA7B,CAAX,CAAZ,CAAP;;MACAlE,uBAAuB,CAACkD,WAAD,EAAchD,OAAd,CAAvB;;MACA8C,QAAQ,GAAGE,WAAW,CAACD,WAAvB,CAJwC;;MAMxCC,WAAW,CAACzC,MAAZ;KAvB8D;;;IA2BlEP,OAAO,CAACiE,MAAR,GAAiBJ,IAAI,CAACK,GAAL,CAAS1D,yBAAT,CAAjB;QAEIiC,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,SAA1B,EAAqC1C,OAArC,CAAlB;IACAyB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;;;WAGP8C,iBAAT,CAA2BzE,IAA3B,EAAiCyB,OAAjC,EAA0C;IAACC,UAAD;IAAaC;GAAvD,EAAsE;QAC9D3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,QAA5C,EAAsD;;;;QAIlDK,GAAG,GAAGlC,IAAI,CAACG,aAAL,CAAmB,KAAnB,CAAV;QACIuE,OAAO,GAAG1E,IAAI,CAAC8B,SAAL,CAAejB,KAAf,CAAqB,sBAArB,CAAd;QACI8D,SAAS,GAAG3E,IAAI,CAAC8B,SAAL,CAAejB,KAAf,CAAqB,sCAArB,CAAhB;;QAEI,CAACqB,GAAL,EAAU;;;;QAINjC,OAAO,GAAG;MACVW,GAAG,EAAEsB,GAAG,CAACtB,GADC;MAEVU,GAAG,EAAEY,GAAG,CAACZ,GAFC;MAGVC,KAAK,EAAEW,GAAG,CAACX;KAHf;;QAMImD,OAAJ,EAAa;MACTzE,OAAO,CAAC2E,SAAR,GAAoBF,OAAO,CAAC,CAAD,CAA3B;KADJ,MAEO,IAAIC,SAAJ,EAAe;MAClB1E,OAAO,CAAC2E,SAAR,GAAoBD,SAAS,CAAC,CAAD,CAAT,KAAiB,WAAjB,GAA+B,MAA/B,GAAwC,MAA5D;;;IAGJ5E,uBAAuB,CAACC,IAAD,EAAOC,OAAP,CAAvB;;QAEIyC,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,OAA1B,EAAmC1C,OAAnC,CAAlB;IACAyB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;;;WAGPkD,SAAT,CAAmB7E,IAAnB,EAAyByB,OAAzB,EAAkC;IAACC,UAAD;IAAaC;GAA/C,EAA8D;QACtD3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,KAA5C,EAAmD;;;;QAI/C5B,OAAO,GAAG;MACVW,GAAG,EAAEZ,IAAI,CAACY,GADA;MAEVU,GAAG,EAAEtB,IAAI,CAACsB,GAFA;MAGVC,KAAK,EAAEvB,IAAI,CAACuB;KAHhB;QAMImB,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,OAA1B,EAAmC1C,OAAnC,CAAlB;IACAyB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;;;WAGPmD,QAAT,CAAkB9E,IAAlB,EAAwByB,OAAxB,EAAiC;IAACC,UAAD;IAAaC;GAA9C,EAA6D;QACrD3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,IAA5C,EAAkD;;;;QAI9Ca,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,IAA1B,CAAlB;IACAjB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;;;WAGPoD,uBAAT,CAAiC/E,IAAjC,EAAuCyB,OAAvC,EAAgD;IAACC,UAAD;IAAaC;GAA7D,EAA4E;QACpE3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,QAA5C,EAAsD;;;;QAIlDmD,MAAM,GAAGhF,IAAI,CAACG,aAAL,CAAmB,QAAnB,CAAb;;QAEI,CAAC6E,MAAL,EAAa;;;;QAITpE,GAAG,GAAGoE,MAAM,CAACpE,GAAjB,CAXwE;;QAcpE,CAACA,GAAD,IAAQ,CAACA,GAAG,CAACC,KAAJ,CAAU,eAAV,CAAb,EAAyC;;;;QAIrCZ,OAAO,GAAG;MACVqC,GAAG,EAAE1B;KADT;;IAIAb,uBAAuB,CAACC,IAAD,EAAOC,OAAP,CAAvB;;IAEAA,OAAO,CAACL,IAAR,GAAeI,IAAI,CAACM,SAApB;QAEIoC,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,OAA1B,EAAmC1C,OAAnC,CAAlB;IACAyB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;;;WAGPsD,2BAAT,CAAqCjF,IAArC,EAA2CyB,OAA3C,EAAoD;IAACC,UAAD;IAAaC;GAAjE,EAAgF;QACxE3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,QAA5C,EAAsD;;;;QAIlDqD,UAAU,GAAGlF,IAAI,CAACG,aAAL,CAAmB,YAAnB,CAAjB;QACIgF,IAAI,GAAGnF,IAAI,CAACG,aAAL,CAAmB,GAAnB,CAAX;;QAEI,CAAC+E,UAAD,IAAe,CAACC,IAApB,EAA0B;;;;QAItB7C,GAAG,GAAG6C,IAAI,CAACnD,IAAf,CAZ4E;;QAexE,CAACM,GAAD,IAAQ,CAACA,GAAG,CAACzB,KAAJ,CAAU,eAAV,CAAb,EAAyC;;;;QAIrCZ,OAAO,GAAG;MACVqC,GAAG,EAAEA;KADT;;IAIAvC,uBAAuB,CAACC,IAAD,EAAOC,OAAP,CAAvB;;IAEAA,OAAO,CAACL,IAAR,GAAeI,IAAI,CAACM,SAApB;QAEIoC,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,OAA1B,EAAmC1C,OAAnC,CAAlB;IACAyB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;;;WAGPyD,gBAAT,CAA0BpF,IAA1B,EAAgCyB,OAAhC,EAAyC;IAACC,UAAD;IAAaC;GAAtD,EAAqE;QAC7D3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,QAA5C,EAAsD;;;;QAIlDwD,GAAG,GAAGrF,IAAI,CAACG,aAAL,CAAmB,KAAnB,CAAV,CALiE;;QAQ7D,CAACkF,GAAL,EAAU;;;;QAINC,IAAI,GAAGD,GAAG,CAAClF,aAAJ,CAAkB,MAAlB,CAAX;QACID,UAAU,GAAGF,IAAI,CAACG,aAAL,CAAmB,YAAnB,CAAjB,CAbiE;;QAgB7D,CAACmF,IAAD,IAAS,CAACpF,UAAd,EAA0B;;;;QAItBD,OAAO,GAAG;MACVqF,IAAI,EAAEA,IAAI,CAACC;KADf;;IAIAxF,uBAAuB,CAACC,IAAD,EAAOC,OAAP,CAAvB;;QAEIuF,QAAQ,GAAGH,GAAG,CAACI,YAAJ,CAAiB,OAAjB,KAA6B,EAA5C;QACIC,SAAS,GAAGJ,IAAI,CAACG,YAAL,CAAkB,OAAlB,KAA8B,EAA9C;QACIE,SAAS,GAAG,8BAAhB;QACIC,eAAe,GAAGJ,QAAQ,CAAC3E,KAAT,CAAe8E,SAAf,KAA6BD,SAAS,CAAC7E,KAAV,CAAgB8E,SAAhB,CAAnD;;QACIC,eAAJ,EAAqB;MACjB3F,OAAO,CAAC4F,QAAR,GAAmBD,eAAe,CAAC,CAAD,CAAf,CAAmBE,WAAnB,EAAnB;;;QAGApD,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,MAA1B,EAAkC1C,OAAlC,CAAlB;IACAyB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;;;WAGPoE,aAAT,CAAuB/F,IAAvB,EAA6ByB,OAA7B,EAAsC;IAACC,UAAD;IAAaC;GAAnD,EAAkE;QAC1D3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,KAA5C,EAAmD;;;;QAI/C,CAACmE,WAAD,IAAgBhG,IAAI,CAACiG,QAAzB;;QAEID,WAAW,IAAIA,WAAW,CAACnE,OAAZ,KAAwB,MAA3C,EAAmD;UAC3C5B,OAAO,GAAG;QAACqF,IAAI,EAAEU,WAAW,CAACT;OAAjC;UAEIC,QAAQ,GAAGxF,IAAI,CAACyF,YAAL,CAAkB,OAAlB,KAA8B,EAA7C;UACIC,SAAS,GAAGM,WAAW,CAACP,YAAZ,CAAyB,OAAzB,KAAqC,EAArD;UACIE,SAAS,GAAG,8BAAhB;UACIC,eAAe,GAAGJ,QAAQ,CAAC3E,KAAT,CAAe8E,SAAf,KAA6BD,SAAS,CAAC7E,KAAV,CAAgB8E,SAAhB,CAAnD;;UACIC,eAAJ,EAAqB;QACjB3F,OAAO,CAAC4F,QAAR,GAAmBD,eAAe,CAAC,CAAD,CAAf,CAAmBE,WAAnB,EAAnB;;;UAGApD,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,MAA1B,EAAkC1C,OAAlC,CAAlB;MACAyB,UAAU,CAACgB,WAAD,CAAV;MACAf,YAAY;;;;WAIXuE,sBAAT,CAAgClG,IAAhC,EAAsCyB,OAAtC,EAA+C;IAACC,UAAD;IAAaC;GAA5D,EAA2E;QACnE3B,IAAI,CAAC4B,QAAL,KAAkB,CAAlB,IAAuB5B,IAAI,CAAC6B,OAAL,KAAiB,QAA5C,EAAsD;;;;QAIlDsE,MAAM,GAAGnG,IAAI,CAACG,aAAL,CAAmB,QAAnB,CAAb;;QAEI,CAACgG,MAAD,IAAW,CAACA,MAAM,CAACvF,GAAP,CAAWC,KAAX,CAAiB,8BAAjB,CAAhB,EAAkE;;;;QAI9DZ,OAAO,GAAG;MAACL,IAAI,EAAEuG,MAAM,CAAChD;KAA5B;QACIT,WAAW,GAAGjB,OAAO,CAACkB,iBAAR,CAA0B,MAA1B,EAAkC1C,OAAlC,CAAlB;IACAyB,UAAU,CAACgB,WAAD,CAAV;IACAf,YAAY;;;SAGT,CACHH,YADG,EAEHoB,gBAFG,EAGHU,iBAHG,EAIHI,oBAJG,EAKHG,mBALG,EAMHoB,2BANG;EAOHb,iBAPG,EAQHK,iBARG,EASHI,SATG,EAUHC,QAVG,EAWHM,gBAXG,EAYHW,aAZG,EAaHhB,uBAbG,EAcHmB,sBAdG,CAAP;;;;;"}